#!/bin/sh

[ $# -eq 2 ] || (printf \
                     "\tUsage: <rev> <in-file>
\tREV: The a tree-ish object with the files to merge
\tIN-FILE: A file containing null separated file names of files you want to merge. (xargs -0) style
" && exit 2)

topic_treeish="$1"
in_file="$2"

[ -f in_file ] || (printf "Not a file %s" "$2" && exit 1)

printf "Current branch: %s (this should be your orig branch)\n" "$(git branch --show-current)"

# checkout the important files from topic
xargs -0 -a "$in_file" sh -c -I {} "git checkout $topic_treeish -- '{}'"

# writing the tree now results in a commit that adds the changes to our specific files
work_commit=$(git commit-tree --no-gpg-sign -m "Commit that adds the sync files" "$(git write-tree)")

printf "Created work commit %s\nResetting and starting merge.." "$work_commit"

git reset --hard

git merge --allow-unrelated-histories "$work_commit"
